{
  "name": "pop-hash",
  "version": "1.0.1",
  "description": "A hash function for arbitrary objects",
  "main": "pop-hash.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/kriskowal/pop-hash.git"
  },
  "keywords": [
    "hash",
    "polymorphic",
    "operator"
  ],
  "author": {
    "name": "Kris Kowal",
    "email": "kris@cixar.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/kriskowal/pop-hash/issues"
  },
  "homepage": "https://github.com/kriskowal/pop-hash",
  "dependencies": {
    "weak-map": "^1.0.5"
  },
  "readme": "\n## Hash\n\nHash is a function that will consistently return the same, almost unique value\nfor any given value, particularly objects.\nHashing is suitable for grouping objects into buckets with a low probability of\nmultiple non-identical values sharing the same bucket.\n\n```js\nvar hash = require(\"pop-hash\");\nhash([])\nhash({})\nhash(1)\n```\n\n## Polymorphic operator\n\nA well-planned system of objects is beautiful: a system where every meaningful\nmethod for an object has been anticipated in the design.\nInevitably, another layer of architecture introduces a new concept and with it\nthe temptation to monkey-patch, dunk-punch, or otherwise cover-up the omission.\nBut reaching backward in time, up through the layers of architecture doesn't\nalways compose well, when different levels introduce concepts of the same name\nbut distinct behavior.\n\nA polymorphic operator is a function that accepts as its first argument an\nobject and varies its behavior depending on its type.\nSuch an operator has the benefit of covering for the types from higher layers of\narchitecture, but defers to the eponymous method name of types yet to be\ndefined.\n\n```js\nhash({\n    hash: function () {\n        return JSON.stringify(this);\n    }\n})\n```\n\n## Implementation\n\nThe implementation of this object identity hash varies between browsers and\nNode.js using the \"browser\" configuration in package.json, which is respected by\n[Browserify][] and similar tools, particularly [Mr][].\n\n[Browserify]: https://github.com/substack/node-browserify\n[Mr]: https://github.com/montagejs/mr\n\nThe implementation uses a WeakMap or a WeakMap shim to assign and recall\na randomly generated number to every object it encounters.\nHash methods in general may return either strings or numbers, since either is\nsuitable for use as a key in a plain object.\nNon object values pass through hash.\n\nThe Node.js implementation once took advantage of Aleksey Smolenchuck's\n`objhash` module, which uses V8's own internal object hash function, but\nbut the binary dependency prooved a burden to maintain.\n",
  "readmeFilename": "README.md",
  "_id": "pop-hash@1.0.1",
  "_from": "pop-hash@^1.0.0"
}
