{
  "name": "pop-clear",
  "version": "1.0.0",
  "description": "Clears arrays, objects, and instances that implement the clear method.",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "jasminum test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/kriskowal/pop-clear.git"
  },
  "keywords": [
    "polymorphic",
    "operator",
    "pop",
    "clear"
  ],
  "author": {
    "name": "Kris Kowal",
    "email": "kris@cixar.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/kriskowal/pop-clear/issues"
  },
  "homepage": "https://github.com/kriskowal/pop-clear",
  "devDependencies": {
    "jasminum": "0.0.4"
  },
  "readme": "\n# Clear\n\nThis JavaScript package exports a clear operator that accepts an array, object,\nor any other object that implements the clear method.\nFor objects, the clear method deletes all enumerable properties.\n\n```\n$ npm install --save pop-clear\n```\n\n```js\nvar clear = require(\"pop-clear\");\n\nvar array = [1, 2, 3];\nclear(array);\nexpect(array).toEqual([]);\n\nvar object = {a: 10, b: 20};\nclear(object);\nexpect(object).toEqual({});\n\nvar instance = {\n    clear: function () {\n        throw new TypeError(\"Can't clear\");\n    }\n};\nexpect(function () {\n    clear(instance);\n}).toThrow();\n```\n\n## Polymorphic operator\n\nA well-planned system of objects is beautiful: a system where every meaningful\nmethod for an object has been anticipated in the design.\nInevitably, another layer of architecture introduces a new concept and with it\nthe temptation to monkey-patch, dunk-punch, or otherwise cover-up the omission.\nBut reaching backward in time, up through the layers of architecture doesn't\nalways compose well, when different levels introduce concepts of the same name\nbut distinct behavior.\n\nA polymorphic operator is a function that accepts as its first argument an\nobject and varies its behavior depending on its type.\nSuch an operator has the benefit of covering for the types from higher layers of\narchitecture, but defers to the eponymous method name of types yet to be\ndefined.\n\nThe clear operator delegates to the clear method of the given object if it is\nimplemented.\nThis is particularly useful for cases where the object may be an array or an\nobservable array, for which the `clear` method has been overridden to dispatch\nranged content changes.\n\n## License and Copyright\n\nCopyright (c) 2015 Kristopher Michael Kowal and contributors.\nAll rights reserved.\nMIT License\n\n",
  "readmeFilename": "README.md",
  "_id": "pop-clear@1.0.0",
  "_from": "pop-clear@^1.0.0"
}
